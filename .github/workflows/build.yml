# Main workflow for building and checking code quality
name: Build

# Trigger the workflow on push and pull request events for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Prevent multiple workflows from running simultaneously on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ secrets.PALANTIR_GHA }}

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest] #, macos-latest]
        configuration: [Release]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: ${{github.workspace}}/build
        shell: pwsh
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
                  -DBUILD_EXAMPLES=OFF `
                  -DGITHUB_TOKEN=${{env.GITHUB_TOKEN}}

      - name: Configure CMake (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                  -DBUILD_EXAMPLES=OFF \
                  -DGITHUB_TOKEN=${{env.GITHUB_TOKEN}}

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{env.BUILD_TYPE}} --parallel

      - name: Prepare artifacts for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifact-bin
          Copy-Item "build/sauron-sdk-curl/Release/*.dll" -Destination artifact-bin/
          Copy-Item "build/_deps/curl-build/lib/Release/libcurl.*" -Destination artifact-bin/
          New-Item -ItemType Directory -Force -Path artifact-src
          Copy-Item ".\build\_deps\api_spec-src\" -Recurse -Destination artifact-src\api_sepc
          Copy-Item ".\sauron-sdk-curl\" -Recurse -Destination artifact-src\sauron-sdk-curl
          Copy-Item ".\build\sauron-sdk-curl\include\sauron_sdk_curl_export.h" -Recurse -Destination artifact-src\sauron-sdk-curl\include

      - name: Prepare artifacts for macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          mkdir -p artifact-bin
          cp build/sauron-sdk-curl/Release/*.dylib artifact-bin/
          cp build/_deps/curl-build/lib/Release/libcurl.* artifact-bin/

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sauron-sdk-curl-bin_${{ matrix.os }}-${{ runner.arch }}-latest
          overwrite: true
          path: artifact-bin
          if-no-files-found: error

      - name: Upload source artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: sauron-sdk-curl-src-latest
          overwrite: true
          path: artifact-src
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          merge-multiple: true

      - name: Delete existing release
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: sauron-sdk-curl-latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: "Sauron SDK Curl Latest"
          body: "Latest build of Sauron SDK Curl"
          tag_name: sauron-sdk-curl-latest
          files: all-artifacts/**/*
          draft: false
          prerelease: false


